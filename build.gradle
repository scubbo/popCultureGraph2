group 'org.scubbo.popculturegraph'
version '1.0-SNAPSHOT'

apply plugin: 'java'

repositories {
    mavenCentral()
    jcenter()
}

test {
    exclude '**/nettest/*'
}

task connectionTest(type: Test) {
    include '**'
}

dependencies {
    compile group: 'org.jsoup', name: 'jsoup', version: '1.7.2'
    compile group: 'org.json', name: 'json', version: '20160212'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'
    compile group: 'org.jgrapht', name: 'jgrapht-core', version: '0.9.0'
    compile group: 'com.google.guava', name: 'guava', version: '19.0'
    compile group: 'org.eclipse.jetty', name: 'jetty-server', version: '9.4.0.M0'
    compile group: 'org.xerial', name: 'sqlite-jdbc', version: '3.8.11.2'
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile 'org.assertj:assertj-core:2.0.0'
    testCompile "org.mockito:mockito-core:1.+"
    compileOnly "org.projectlombok:lombok:1.16.8"
}

// Shadow setup

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.github.jengelman.gradle.plugins:shadow:1.2.3"
    }
}

apply plugin: "com.github.johnrengelman.shadow"

jar {
    manifest {
        attributes 'Main-Class': 'blog.shadow.HelloWorld'
    }
}

tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
        events "passed", "skipped", "failed", "standardOut"
        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events "started", "passed", "skipped", "failed", "standardOut", "standardError"
            exceptionFormat "full"
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}
